{
    "contents" : "library(shiny)\r\nlibrary(shinyjs)\r\n\r\n\r\n\r\n# Get table metadata. For now, just the fields\r\n# Further development: also define field types\r\n# and create inputs generically\r\nGetTableMetadata <- function() {\r\n  fields <- c(id = \"Id\", \r\n              name = \"Name\", \r\n              used_shiny = \"Used Shiny\", \r\n              r_num_years = \"R Years\")\r\n  \r\n  result <- list(fields = fields)\r\n  return (result)\r\n}\r\n\r\n# Find the next ID of a new record\r\n# (in mysql, this could be done by an incremental index)\r\nGetNextId <- function() {\r\n  if (exists(\"responses\") && nrow(responses) > 0) {\r\n    max(as.integer(rownames(responses))) + 1\r\n  } else {\r\n    return (1)\r\n  }\r\n}\r\n\r\n#C\r\nCreateData <- function(data) {\r\n  \r\n  data <- CastData(data)\r\n  rownames(data) <- GetNextId()\r\n  if (exists(\"responses\")) {\r\n    responses <<- rbind(responses, data)\r\n  } else {\r\n    responses <<- data\r\n  }\r\n}\r\n\r\n#R\r\nReadData <- function() {\r\n  if (exists(\"responses\")) {\r\n    responses\r\n  }\r\n}\r\n\r\n\r\n\r\n#U\r\nUpdateData <- function(data) {\r\n  data <- CastData(data)\r\n  responses[row.names(responses) == row.names(data), ] <<- data\r\n}\r\n\r\n#D\r\nDeleteData <- function(data) {\r\n  responses <<- responses[row.names(responses) != unname(data[\"id\"]), ]\r\n}\r\n\r\n\r\n\r\n\r\n# Cast from Inputs to a one-row data.frame\r\nCastData <- function(data) {\r\n  datar <- data.frame(name = data[\"name\"], \r\n                      used_shiny = as.logical(data[\"used_shiny\"]), \r\n                      r_num_years = as.integer(data[\"r_num_years\"]),\r\n                      stringsAsFactors = FALSE)\r\n  \r\n  rownames(datar) <- data[\"id\"]\r\n  return (datar)\r\n}\r\n\r\n\r\n\r\n\r\n# Return an empty, new record\r\nCreateDefaultRecord <- function() {\r\n  mydefault <- CastData(list(id = \"0\", name = \"\", used_shiny = FALSE, r_num_years = 2))\r\n  return (mydefault)\r\n}\r\n\r\n# Fill the input fields with the values of the selected record in the table\r\nUpdateInputs <- function(data, session) {\r\n  updateTextInput(session, \"id\", value = unname(rownames(data)))\r\n  updateTextInput(session, \"name\", value = unname(data[\"name\"]))\r\n  updateCheckboxInput(session, \"used_shiny\", value = as.logical(data[\"used_shiny\"]))\r\n  updateSliderInput(session, \"r_num_years\", value = as.integer(data[\"r_num_years\"]))\r\n}\r\n\r\n\r\nui <- fluidPage(\r\n  #use shiny js to disable the ID field\r\n  shinyjs::useShinyjs(),\r\n  \r\n  #data table\r\n  DT::dataTableOutput(\"responses\", width = 300), \r\n  \r\n  #input fields\r\n  tags$hr(),\r\n  shinyjs::disabled(textInput(\"id\", \"Id\", \"0\")),\r\n  textInput(\"name\", \"Name\", \"\"),\r\n  checkboxInput(\"used_shiny\", \"Used Shiny\", FALSE),\r\n  sliderInput(\"r_num_years\", \"R Years\", 0, 25, 2, ticks = FALSE),\r\n  \r\n  #action buttons\r\n  actionButton(\"submit\", \"Submit\"),\r\n  actionButton(\"new\", \"New\"),\r\n  actionButton(\"delete\", \"Delete\")\r\n)\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  # input fields are treated as a group\r\n  formData <- reactive({\r\n    sapply(names(GetTableMetadata()$fields), function(x) input[[x]])\r\n  })\r\n  \r\n  # Click \"Submit\" button -> save data\r\n  observeEvent(input$submit, {\r\n    if (input$id != \"0\") {\r\n      UpdateData(formData())\r\n    } else {\r\n      CreateData(formData())\r\n      UpdateInputs(CreateDefaultRecord(), session)\r\n    }\r\n  }, priority = 1)\r\n  \r\n  # Press \"New\" button -> display empty record\r\n  observeEvent(input$new, {\r\n    UpdateInputs(CreateDefaultRecord(), session)\r\n  })\r\n  \r\n  # Press \"Delete\" button -> delete from data\r\n  observeEvent(input$delete, {\r\n    DeleteData(formData())\r\n    UpdateInputs(CreateDefaultRecord(), session)\r\n  }, priority = 1)\r\n  \r\n  # Select row in table -> show details in inputs\r\n  observeEvent(input$responses_rows_selected, {\r\n    if (length(input$responses_rows_selected) > 0) {\r\n      data <- ReadData()[input$responses_rows_selected, ]\r\n      UpdateInputs(data, session)\r\n    }\r\n    \r\n  })\r\n  \r\n  # display table\r\n  output$responses <- DT::renderDataTable({\r\n    #update after submit is clicked\r\n    input$submit\r\n    #update after delete is clicked\r\n    input$delete\r\n    ReadData()\r\n  }, server = FALSE, selection = \"single\",\r\n  colnames = unname(GetTableMetadata()$fields)[-1]\r\n  )     \r\n  \r\n  \r\n  \r\n}\r\n\r\n\r\n# Shiny app with 3 fields that the user can submit data for\r\nshinyApp(ui = ui, server = server)",
    "created" : 1468572203578.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "876576995",
    "id" : "4B3F2F99",
    "lastKnownWriteTime" : 1468572248,
    "path" : "~/intime/project/shiny_crud/app.R",
    "project_path" : "app.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}